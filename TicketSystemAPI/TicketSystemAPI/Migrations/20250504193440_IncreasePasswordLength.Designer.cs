// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystemAPI.Data;

#nullable disable

namespace TicketSystemAPI.Migrations
{
    [DbContext(typeof(TicketSystemContext))]
    [Migration("20250504193440_IncreasePasswordLength")]
    partial class IncreasePasswordLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TicketSystemAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("amount");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("method");

                    b.HasKey("PaymentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaymentId" }, "paymentId_UNIQUE")
                        .IsUnique();

                    b.ToTable("payments", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticketId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("discountCode");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime(1)")
                        .HasColumnName("expirationTime");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentId");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("price");

                    b.Property<DateTime>("PurchaseTime")
                        .HasColumnType("datetime(1)")
                        .HasColumnName("purchaseTime");

                    b.Property<uint?>("RideLimit")
                        .HasColumnType("int unsigned")
                        .HasColumnName("rideLimit");

                    b.Property<uint?>("RidesTaken")
                        .HasColumnType("int unsigned")
                        .HasColumnName("ridesTaken");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("TicketId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_Tickets_1_idx");

                    b.HasIndex(new[] { "TypeId" }, "fk_Tickets_3_idx");

                    b.HasIndex(new[] { "PaymentId" }, "fk_Tickets_Payments");

                    b.HasIndex(new[] { "TicketId" }, "ticketId_UNIQUE")
                        .IsUnique();

                    b.ToTable("tickets", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.Tickettype", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<int?>("BaseDurationDays")
                        .HasColumnType("int")
                        .HasColumnName("baseDurationDays");

                    b.Property<decimal?>("BasePrice")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)")
                        .HasColumnName("basePrice");

                    b.Property<int?>("BaseRideLimit")
                        .HasColumnType("int")
                        .HasColumnName("baseRideLimit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TypeId" }, "typeId_UNIQUE")
                        .IsUnique();

                    b.ToTable("tickettypes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("password");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "userId_UNIQUE")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.Ticket", b =>
                {
                    b.HasOne("TicketSystemAPI.Models.Payment", "Payment")
                        .WithMany("Tickets")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Tickets_Payments");

                    b.HasOne("TicketSystemAPI.Models.Tickettype", "Type")
                        .WithMany("Tickets")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("fk_Tickets_3");

                    b.HasOne("TicketSystemAPI.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_Tickets_1");

                    b.Navigation("Payment");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.Payment", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.Tickettype", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketSystemAPI.Models.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
